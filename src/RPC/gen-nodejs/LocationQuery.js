//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./metok_types');
//HELPER FUNCTIONS AND STRUCTURES

LocationQuery_locTokenQuery_args = function(args) {
  this.locToken = null;
  this.key = null;
  if (args) {
    if (args.locToken !== undefined) {
      this.locToken = args.locToken;
    }
    if (args.key !== undefined) {
      this.key = args.key;
    }
  }
};
LocationQuery_locTokenQuery_args.prototype = {};
LocationQuery_locTokenQuery_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.locToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LocationQuery_locTokenQuery_args.prototype.write = function(output) {
  output.writeStructBegin('LocationQuery_locTokenQuery_args');
  if (this.locToken !== null && this.locToken !== undefined) {
    output.writeFieldBegin('locToken', Thrift.Type.STRING, 1);
    output.writeString(this.locToken);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 2);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LocationQuery_locTokenQuery_result = function(args) {
  this.success = null;
  this.qe = null;
  this.ne = null;
  if (args instanceof ttypes.MetokQueryException) {
    this.qe = args;
    return;
  }
  if (args instanceof ttypes.NotFoundException) {
    this.ne = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.qe !== undefined) {
      this.qe = args.qe;
    }
    if (args.ne !== undefined) {
      this.ne = args.ne;
    }
  }
};
LocationQuery_locTokenQuery_result.prototype = {};
LocationQuery_locTokenQuery_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Location();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.qe = new ttypes.MetokQueryException();
        this.qe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ne = new ttypes.NotFoundException();
        this.ne.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LocationQuery_locTokenQuery_result.prototype.write = function(output) {
  output.writeStructBegin('LocationQuery_locTokenQuery_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.qe !== null && this.qe !== undefined) {
    output.writeFieldBegin('qe', Thrift.Type.STRUCT, 1);
    this.qe.write(output);
    output.writeFieldEnd();
  }
  if (this.ne !== null && this.ne !== undefined) {
    output.writeFieldBegin('ne', Thrift.Type.STRUCT, 2);
    this.ne.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LocationQuery_addrTokenQuery_args = function(args) {
  this.locToken = null;
  this.key = null;
  if (args) {
    if (args.locToken !== undefined) {
      this.locToken = args.locToken;
    }
    if (args.key !== undefined) {
      this.key = args.key;
    }
  }
};
LocationQuery_addrTokenQuery_args.prototype = {};
LocationQuery_addrTokenQuery_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.locToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LocationQuery_addrTokenQuery_args.prototype.write = function(output) {
  output.writeStructBegin('LocationQuery_addrTokenQuery_args');
  if (this.locToken !== null && this.locToken !== undefined) {
    output.writeFieldBegin('locToken', Thrift.Type.STRING, 1);
    output.writeString(this.locToken);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 2);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LocationQuery_addrTokenQuery_result = function(args) {
  this.success = null;
  this.qe = null;
  this.ne = null;
  if (args instanceof ttypes.MetokQueryException) {
    this.qe = args;
    return;
  }
  if (args instanceof ttypes.NotFoundException) {
    this.ne = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.qe !== undefined) {
      this.qe = args.qe;
    }
    if (args.ne !== undefined) {
      this.ne = args.ne;
    }
  }
};
LocationQuery_addrTokenQuery_result.prototype = {};
LocationQuery_addrTokenQuery_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AddressComponent();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.qe = new ttypes.MetokQueryException();
        this.qe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ne = new ttypes.NotFoundException();
        this.ne.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LocationQuery_addrTokenQuery_result.prototype.write = function(output) {
  output.writeStructBegin('LocationQuery_addrTokenQuery_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.qe !== null && this.qe !== undefined) {
    output.writeFieldBegin('qe', Thrift.Type.STRUCT, 1);
    this.qe.write(output);
    output.writeFieldEnd();
  }
  if (this.ne !== null && this.ne !== undefined) {
    output.writeFieldBegin('ne', Thrift.Type.STRUCT, 2);
    this.ne.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LocationQueryClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
LocationQueryClient.prototype = {};
LocationQueryClient.prototype.locTokenQuery = function(locToken, key, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_locTokenQuery(locToken, key);
};

LocationQueryClient.prototype.send_locTokenQuery = function(locToken, key) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('locTokenQuery', Thrift.MessageType.CALL, this.seqid);
  var args = new LocationQuery_locTokenQuery_args();
  args.locToken = locToken;
  args.key = key;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LocationQueryClient.prototype.recv_locTokenQuery = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LocationQuery_locTokenQuery_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.qe) {
    return callback(result.qe);
  }
  if (null !== result.ne) {
    return callback(result.ne);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('locTokenQuery failed: unknown result');
};
LocationQueryClient.prototype.addrTokenQuery = function(locToken, key, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_addrTokenQuery(locToken, key);
};

LocationQueryClient.prototype.send_addrTokenQuery = function(locToken, key) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addrTokenQuery', Thrift.MessageType.CALL, this.seqid);
  var args = new LocationQuery_addrTokenQuery_args();
  args.locToken = locToken;
  args.key = key;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LocationQueryClient.prototype.recv_addrTokenQuery = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LocationQuery_addrTokenQuery_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.qe) {
    return callback(result.qe);
  }
  if (null !== result.ne) {
    return callback(result.ne);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addrTokenQuery failed: unknown result');
};
LocationQueryProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
LocationQueryProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

LocationQueryProcessor.prototype.process_locTokenQuery = function(seqid, input, output) {
  var args = new LocationQuery_locTokenQuery_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.locTokenQuery(args.locToken, args.key, function (err, result) {
    var result = new LocationQuery_locTokenQuery_result((err != null ? err : {success: result}));
    output.writeMessageBegin("locTokenQuery", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

LocationQueryProcessor.prototype.process_addrTokenQuery = function(seqid, input, output) {
  var args = new LocationQuery_addrTokenQuery_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.addrTokenQuery(args.locToken, args.key, function (err, result) {
    var result = new LocationQuery_addrTokenQuery_result((err != null ? err : {success: result}));
    output.writeMessageBegin("addrTokenQuery", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

