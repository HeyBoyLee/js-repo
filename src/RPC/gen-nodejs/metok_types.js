//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ttypes = module.exports = {};
Location = module.exports.Location = function(args) {
  this.lat = null;
  this.lng = null;
  if (args) {
    if (args.lat !== undefined) {
      this.lat = args.lat;
    }
    if (args.lng !== undefined) {
      this.lng = args.lng;
    }
  }
};
Location.prototype = {};
Location.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.lat = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.lng = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Location.prototype.write = function(output) {
  output.writeStructBegin('Location');
  if (this.lat !== null && this.lat !== undefined) {
    output.writeFieldBegin('lat', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.lat);
    output.writeFieldEnd();
  }
  if (this.lng !== null && this.lng !== undefined) {
    output.writeFieldBegin('lng', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.lng);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AddressComponent = module.exports.AddressComponent = function(args) {
  this.infocode = null;
  this.province = null;
  this.city = null;
  this.district = null;
  this.districtCode = null;
  if (args) {
    if (args.infocode !== undefined) {
      this.infocode = args.infocode;
    }
    if (args.province !== undefined) {
      this.province = args.province;
    }
    if (args.city !== undefined) {
      this.city = args.city;
    }
    if (args.district !== undefined) {
      this.district = args.district;
    }
    if (args.districtCode !== undefined) {
      this.districtCode = args.districtCode;
    }
  }
};
AddressComponent.prototype = {};
AddressComponent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.infocode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.province = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.city = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.district = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.districtCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddressComponent.prototype.write = function(output) {
  output.writeStructBegin('AddressComponent');
  if (this.infocode !== null && this.infocode !== undefined) {
    output.writeFieldBegin('infocode', Thrift.Type.I32, 1);
    output.writeI32(this.infocode);
    output.writeFieldEnd();
  }
  if (this.province !== null && this.province !== undefined) {
    output.writeFieldBegin('province', Thrift.Type.STRING, 2);
    output.writeString(this.province);
    output.writeFieldEnd();
  }
  if (this.city !== null && this.city !== undefined) {
    output.writeFieldBegin('city', Thrift.Type.STRING, 3);
    output.writeString(this.city);
    output.writeFieldEnd();
  }
  if (this.district !== null && this.district !== undefined) {
    output.writeFieldBegin('district', Thrift.Type.STRING, 4);
    output.writeString(this.district);
    output.writeFieldEnd();
  }
  if (this.districtCode !== null && this.districtCode !== undefined) {
    output.writeFieldBegin('districtCode', Thrift.Type.STRING, 5);
    output.writeString(this.districtCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotFoundException = module.exports.NotFoundException = function(args) {
  Thrift.TException.call(this, "NotFoundException")
  this.name = "NotFoundException"
  this.status = null;
  this.message = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(NotFoundException, Thrift.TException);
NotFoundException.prototype.name = 'NotFoundException';
NotFoundException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotFoundException.prototype.write = function(output) {
  output.writeStructBegin('NotFoundException');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetokQueryException = module.exports.MetokQueryException = function(args) {
  Thrift.TException.call(this, "MetokQueryException")
  this.name = "MetokQueryException"
  this.status = null;
  this.message = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(MetokQueryException, Thrift.TException);
MetokQueryException.prototype.name = 'MetokQueryException';
MetokQueryException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetokQueryException.prototype.write = function(output) {
  output.writeStructBegin('MetokQueryException');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

